(* Problem 1   Solution* )
let rec replicate x n = match n with 
  | 0 -> []
  | v -> if v > 0 then [x] @ replicate x (v-1) 
         else raise (Failure "Cannot have negative sized list")
;;

let replicate_tail x n = 
  let rec helper x n acc = 
    if n = 0 then acc 
    else if n > 0 then helper x (n-1) acc 
    else raise (Failure "Cannot have negative sized list") 
  in helper x n []
;;

(* Problem 2   Solution* )
let rec makeList n = 
  if n = 0 then []
  else if n > 0 then (makeList (n-1) @ [n])
  else raise (Failure "Cannot have negative sized list")
;;

let makeListTail n = 
  let rec helper n acc =
    if n = 0 then acc
    else if n > 0 then helper (n-1) ([n] @ acc)
    else raise (Failure "Cannot have negative sized list")
  in helper n []
;;

(* Problem 3   Solution* )
let rec reverse a = match a with | [] -> [] | hd::tl -> reverse tl @ [hd];;

let reverseTail a = let rec helper a acc = match a with | [] -> acc | hd::tl -> hd @ helper tl acc in helper a [];;

(* Problem 4   Solution* )
let rec countLeaves t = match t with | Empty -> 0 | Leaf _ -> 1 | Node(_, t1, t2) -> 1 + countLeaves t1 + countLeaves t2;;

(* Problem 5   Solution* )
let rec toListOrdered t = match t with | Empty -> [] | Leaf v -> [v] | Node(v, t1, t2) -> toListOrdered t1 @ [v] @ toListOrdered t2;;

(* Problem 6   Solution* )
let rec toListPreOrder t = match t with | Empty -> [] | Leaf v -> [v] | Node(v, t1, t2) -> [v] @ toListPreOrder t1 @ toListPreOrder t2;;

(* Problem 7   Solution* )
t(λx.x)(λx.x)

(* Problem 8   Solution* )
(λy.yy)(λy.yy)(λy.yy)

(* Problem 9   Solution* )
y

(* Problem 10  Solution* )
t t

(* Problem 11  Solution* )
list :: a -> [a]

(* Problem 12  Solution* )
divisorsHelp positive current accumulator = do
    if current == 0 then accumulator
    else if positive `mod` current == 0 then divisorsHelp positive (current-1) (current : accumulator)
    else divisorsHelp positive (current-1) accumulator

divisors positive = divisorsHelp positive positive []

(* Problem 13  Solution* )
isPrime num = divisors num == [1, num]

(* Problem 14  Solution* )
primes = filter isPrime [1..maxBound :: Int]

(* Problem 15  Solution* )
17393

(* Problem 16  Solution* )
perfs n = [x | x <- [2..n], List.sum (List.takeWhile (<x) (divisors x)) == x ]
